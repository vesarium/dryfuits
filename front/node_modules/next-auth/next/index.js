"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getServerSession = getServerSession;
exports.default = void 0;

var _core = require("../core");

var _cookie = require("../core/lib/cookie");

var _logger = _interopRequireWildcard(require("../lib/logger"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function NextAuthNextHandler(req, res, options) {
  var _process$env$NEXTAUTH, _req$method;

  (0, _logger.setLogger)(options.logger);

  if (!req.query.nextauth) {
    const error = new Error("Cannot find [...nextauth].js in pages/api/auth. Make sure the filename is written correctly.");

    _logger.default.error("MISSING_NEXTAUTH_API_ROUTE_ERROR", error);

    return res.status(500).send(error.message);
  }

  const host = (_process$env$NEXTAUTH = process.env.NEXTAUTH_URL) !== null && _process$env$NEXTAUTH !== void 0 ? _process$env$NEXTAUTH : process.env.VERCEL_URL;
  if (!host) _logger.default.warn("NEXTAUTH_URL");
  const {
    body,
    redirect,
    cookies,
    headers,
    status = 200
  } = await (0, _core.NextAuthHandler)({
    req: {
      host,
      body: req.body,
      query: req.query,
      cookies: req.cookies,
      headers: req.headers,
      method: (_req$method = req.method) !== null && _req$method !== void 0 ? _req$method : "GET",
      action: req.query.nextauth[0],
      providerId: req.query.nextauth[1],
      error: req.query.nextauth[1]
    },
    options
  });
  res.status(status);
  cookies === null || cookies === void 0 ? void 0 : cookies.forEach(cookie => {
    (0, _cookie.set)(res, cookie.name, cookie.value, cookie.options);
  });
  headers === null || headers === void 0 ? void 0 : headers.forEach(header => {
    res.setHeader(header.key, header.value);
  });

  if (redirect) {
    var _req$body;

    if (((_req$body = req.body) === null || _req$body === void 0 ? void 0 : _req$body.json) !== "true") {
      res.status(302).setHeader("Location", redirect);
      return res.end();
    }

    return res.json({
      url: redirect
    });
  }

  return res.send(body);
}

function NextAuth(...args) {
  if (args.length === 1) {
    return async (req, res) => await NextAuthNextHandler(req, res, args[0]);
  }

  return NextAuthNextHandler(args[0], args[1], args[2]);
}

var _default = NextAuth;
exports.default = _default;

async function getServerSession(context, options) {
  const session = await (0, _core.NextAuthHandler)({
    options,
    req: {
      action: "session",
      method: "GET",
      cookies: context.req.cookies,
      headers: context.req.headers
    }
  });
  const {
    body,
    cookies
  } = session;
  cookies === null || cookies === void 0 ? void 0 : cookies.forEach(cookie => {
    (0, _cookie.set)(context.res, cookie.name, cookie.value, cookie.options);
  });
  if (body && Object.keys(body).length) return body;
  return null;
}